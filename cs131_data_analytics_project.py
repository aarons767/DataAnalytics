# -*- coding: utf-8 -*-
"""CS131 Data Analytics Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r7BwdSdeoqxZgIX0XXfFWDuUGf0yy_cD
"""

#imports
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

clean_gun_data = pd.read_csv('cleaned.csv')
no_missing_gun = pd.read_csv('no_missing.csv')

"""#Data Preprocessing"""

# Check for missing values in the entire dataset
missing_values = clean_gun_data.isnull().sum()

print("Missing values in each column:")
print(missing_values)

# Assuming 'clean_gun_data' DataFrame has columns like 'state' and 'deaths'
# Replace 'deaths' with the actual column representing the death count

top_10_deadliest_states = clean_gun_data.groupby('state')['killed'].sum().nlargest(10)
top_10_deadliest_states

# Check for missing values in the entire dataset
missing_values2 = no_missing_gun.isnull().sum()

print("Missing values in each column:")
print(missing_values2)

# Check for missing values in the entire dataset
missing_values = clean_gun_data.isnull().sum().sum()

print(f"Total missing values in clean_gun_data: {missing_values}")

# Check for missing values in the entire dataset
missing_values2 = no_missing_gun.isnull().sum().sum()

print(f"Total missing values in no_missing_gun: {missing_values2}")

# Display rows with missing values in clean_gun_data
rows_with_missing_clean_gun = clean_gun_data[clean_gun_data.isnull().any(axis=1)]
print("\nRows with missing values in clean_gun_data:")
print(rows_with_missing_clean_gun)

# Display rows with missing values in no_missing_gun
rows_with_missing = no_missing_gun[no_missing_gun.isnull().any(axis=1)]
print("\nRows with missing values in no_missing_gun:")
rows_with_missing

# Get the list of column names
columns_list = no_missing_gun.columns.tolist()

print("List of columns:")
print(columns_list)

"""#Using no_missing.csv

#1. Which cities have the most gun violence incidents
"""

# 1. Cities with increased incidents
city_incidents = no_missing_gun.groupby('city_or_county')['incident_id'].count().sort_values(ascending=False)
print("Cities with the highest number of incidents:\n", city_incidents.head(10)) #Show top 10

#Plotting top 30 cities with highest gun violence incidents
plt.figure(figsize=(12, 10))
city_incidents.head(30).sort_values(ascending=True).plot(kind='barh', color='lightblue')  # Plot the top 30 cities, sorting for highest on top with color
plt.title('Top 30 Cities with the Highest Number of Gun Violence Incidents')
plt.xlabel('Number of Incidents')
plt.ylabel('City/County')
plt.tight_layout()
plt.show()

"""#2. What time of year does gun violence most occur from 2018 - 2023"""

import calendar
import pandas as pd

# Convert 'incident_date' to datetime objects
no_missing_gun['incident_date'] = pd.to_datetime(no_missing_gun['incident_date'])

# Extract the month as numbers
no_missing_gun['incident_month'] = no_missing_gun['incident_date'].dt.month

# Convert the month numbers to month names
no_missing_gun['incident_month'] = no_missing_gun['incident_month'].apply(lambda x: calendar.month_name[x])

# Group by month name and count incidents
monthly_incidents = no_missing_gun.groupby('incident_month')['incident_id'].count()

# Create a list of months in chronological order
months_order = list(calendar.month_name[1:])

# Sort the monthly incidents using the correct order and convert to DataFrame
monthly_incidents = monthly_incidents.reindex(months_order).reset_index()

# Rename the columns for clarity
monthly_incidents.columns = ['Month', 'Incident Count']

# Print the DataFrame
print(monthly_incidents)

#Plot monthly incidents
plt.figure(figsize=(10, 6))
plt.bar(monthly_incidents['Month'], monthly_incidents['Incident Count'], color='lightblue', edgecolor='black')
plt.xlabel("Month")
plt.ylabel("Number of Incidents")
plt.title("Monthly Gun Violence Incidents")
plt.xticks(rotation=45, ha='right') # Rotate x-axis labels for better readability
plt.tight_layout()
plt.show()

#Printing monthly_incidents as a barplot
plt.figure(figsize=(12, 6))
plt.bar(monthly_incidents['Month'], monthly_incidents['Incident Count'], color = 'lightblue')
plt.xlabel("Month")
plt.ylabel("Number of Incidents")
plt.title("Monthly Distribution of Gun Violence Incidents")
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# Convert 'incident_date' to datetime objects if not already done
no_missing_gun['incident_date'] = pd.to_datetime(no_missing_gun['incident_date'])

# Extract year and month
no_missing_gun['incident_year'] = no_missing_gun['incident_date'].dt.year
no_missing_gun['incident_month'] = no_missing_gun['incident_date'].dt.month

# Group by year and month, then count the number of killed
killed_by_month = no_missing_gun.groupby(['incident_year', 'incident_month'])['killed'].sum()

killed_by_month

# Convert 'incident_date' to datetime objects if not already done
no_missing_gun['incident_date'] = pd.to_datetime(no_missing_gun['incident_date'])

# Extract year and month
no_missing_gun['incident_year'] = no_missing_gun['incident_date'].dt.year
no_missing_gun['incident_month'] = no_missing_gun['incident_date'].dt.month

# Group by year and month, then count the number of injured
injured_by_month = no_missing_gun.groupby(['incident_year', 'incident_month'])['injured'].sum()

injured_by_month

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# Convert 'incident_date' to datetime objects if not already done
no_missing_gun['incident_date'] = pd.to_datetime(no_missing_gun['incident_date'])

# Extract year and month
no_missing_gun['incident_year'] = no_missing_gun['incident_date'].dt.year
no_missing_gun['incident_month'] = no_missing_gun['incident_date'].dt.month

# Group by year and month, then count the number of killed
killed_by_month = no_missing_gun.groupby(['incident_year', 'incident_month'])['killed'].sum()

# Reshape the data into a pivot table for the heatmap
killed_by_month_pivot = killed_by_month.unstack(level='incident_month')

# Plot the heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(killed_by_month_pivot, cmap='Reds', annot=True, fmt=".0f", linewidths=.5)

# Customize the plot
plt.title('Number of People Killed per Month Over Years')
plt.xlabel('Month')
plt.ylabel('Year')

# Set month labels for the x-axis
month_labels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
plt.xticks(ticks=range(12), labels=month_labels, rotation=45)

plt.tight_layout()
plt.show()

# Assuming 'no_missing_gun' DataFrame is already loaded as in your provided code

# Convert 'incident_date' to datetime objects if not already done
no_missing_gun['incident_date'] = pd.to_datetime(no_missing_gun['incident_date'])

# Extract year and month
no_missing_gun['incident_year'] = no_missing_gun['incident_date'].dt.year
no_missing_gun['incident_month'] = no_missing_gun['incident_date'].dt.month

# Group by year and month, then count the number of injured
injured_by_month = no_missing_gun.groupby(['incident_year', 'incident_month'])['injured'].sum()

# Reshape the data into a pivot table for the heatmap
injured_by_month_pivot = injured_by_month.unstack(level='incident_month')

# Plot the heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(injured_by_month_pivot, cmap='Reds', annot=True, fmt=".0f", linewidths=.5)

# Customize the plot
plt.title('Number of People injured per Month Over Years')
plt.xlabel('Month')
plt.ylabel('Year')

# Set month labels for the x-axis
month_labels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
plt.xticks(ticks=range(12), labels=month_labels, rotation=45)

plt.tight_layout()
plt.show()

"""#What time of year does gun violence occur in 2022"""

# Filter data for the year 2022
gun_violence_2022 = no_missing_gun[no_missing_gun['incident_date'].dt.year == 2022]

# Group by month and count incidents for 2022
monthly_incidents_2022 = gun_violence_2022.groupby(gun_violence_2022['incident_date'].dt.month)['incident_id'].count()

# Convert month numbers to month names
monthly_incidents_2022.index = monthly_incidents_2022.index.map(lambda x: calendar.month_abbr[x])

# Print the results
print(monthly_incidents_2022)

# Plotting for visualization
plt.figure(figsize=(10, 6))
monthly_incidents_2022.plot(kind='bar')
plt.title('Gun Violence Incidents in 2022 by Month')
plt.xlabel('Month')
plt.ylabel('Number of Incidents')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""#3. Is there any relationship between the number of deaths and the number of injuries for each incident?

"""

# Calculate the correlation between deaths and injuries
correlation = no_missing_gun['killed'].corr(no_missing_gun['injured'])

print(f"The correlation between the number of deaths and injuries is: {correlation}")

# You can also visualize this relationship using a scatter plot
plt.figure(figsize=(15, 8))
plt.scatter(no_missing_gun['killed'], no_missing_gun['injured'], alpha=0.5, color = "blue")
plt.title('Relationship between Number of Deaths and Injuries')
plt.xlabel('Number of Deaths')
plt.ylabel('Number of Injuries')
plt.grid(True)
plt.show()

# Create the heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(no_missing_gun[['killed', 'injured']].corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap: Deaths vs. Injuries')
plt.show()

# Convert 'incident_date' to datetime objects if not already done
no_missing_gun['incident_date'] = pd.to_datetime(no_missing_gun['incident_date'])

# Extract the year
no_missing_gun['incident_year'] = no_missing_gun['incident_date'].dt.year

# Group by year and sum the deaths and injuries
yearly_data = no_missing_gun.groupby('incident_year')[['killed', 'injured']].sum()

# Create the line plot
plt.figure(figsize=(10, 6))
plt.plot(yearly_data.index, yearly_data['killed'], label='Deaths', marker='o')
plt.plot(yearly_data.index, yearly_data['injured'], label='Injuries', marker='o')

plt.xlabel('Year')
plt.ylabel('Number of Deaths/Injuries')
plt.title('Deaths vs. Injuries Over the years')
plt.legend()
plt.grid(True)
plt.show()

"""#1a. Find the state with most deaths."""

# Group by state and sum the number of people killed
state_kills = no_missing_gun.groupby('state')['killed'].sum()

# Find the state with the most people killed
max_kills_state = state_kills.idxmax()
max_kills_value = state_kills.max()

print(f"The state with the most people killed is {max_kills_state} with {max_kills_value} people killed.")

# Find the top 10 states with the most people killed
top_10_states = state_kills.sort_values(ascending=False).head(10)

print("\nTop 10 states with the most people killed:")
top_10_states

"""#4. What's the frequency of number of deaths in the entirety of the dataset?"""

#Find the event with most deaths

max_killed_row = no_missing_gun.loc[no_missing_gun['killed'].idxmax()]
max_killed_row

# Define the bins for grouping the number of deaths
bins = [0, 5, 10, 20, 30, 40, 50, float('inf')]  # Use infinity for the last bin
labels = ['0-5', '6-10', '11-20', '21-30', '31-40', '41-50', '51+']

# Cut the 'killed' column into the defined bins
no_missing_gun['killed_group'] = pd.cut(no_missing_gun['killed'], bins=bins, labels=labels, right=False)

# Calculate the frequency of each group
killed_frequency = no_missing_gun.groupby('killed_group')['incident_id'].count()

killed_frequency

# Calculate the average number of people killed
average_killed = no_missing_gun['killed'].mean()

print(f"The average number of people killed per incident is: {average_killed}")

#Find number of people killed sorted by state
# Group by state and sum the number of people killed
state_kills = no_missing_gun.groupby('state')['killed'].sum()

# Sort the states by the number of deaths in descending order
sorted_state_kills = state_kills.sort_values(ascending=False)

# Print or use the sorted results
sorted_state_kills

# Create a copy to avoid modifying the original Series
other_states = sorted_state_kills.copy()

# Find the index of the state after Alabama
alabama_index = other_states.index.get_loc('Alabama')

# Sum the values for all states after Alabama and create a new entry in the Series
if alabama_index < len(other_states) - 1:
  other_value = other_states.iloc[alabama_index + 1:].sum()
  other_states = other_states.iloc[:alabama_index + 1]  # Trim to up to Alabama
  other_states['Other'] = other_value  # Add "Other" category

# Create the pie chart
plt.figure(figsize=(10, 10))
plt.pie(other_states, labels=other_states.index, autopct='%1.1f%%', startangle=90)
plt.title('Distribution of Gun Violence Deaths by State (Other < 2%)')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()

#Barplot of number of people killed sorted by state
plt.figure(figsize=(12, 6))
sorted_state_kills.plot(kind='bar')
plt.title('Number of People Killed by State (Sorted)')
plt.xlabel('State')
plt.ylabel('Number of Killed')
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better visibility
plt.tight_layout() # Adjust layout to prevent labels from overlapping
plt.show()
